inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
#this variable will hold the inverse of the matrix
inv <- NULL
#set the value of the matrix and clear the value of the matrix's inverse
set <- function(y) {
x <<- y
inv <<- NULL
}
#get the matrix
get <- function() x
#set the value of the matrix's inverse to what is passed
setinverse <- function(inverse) inv <<- inverse
#get the value of the matrix's inverse
getinverse <- function() inv
#construct the list of the functions
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
k<-matrix()
cacheSolve <- function(x, ...) {
#get the value of the inverse of the matrix
inv <- x$getinverse()
#if it is not null return the computed value from the cache
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
#otherwise get the matrix and compute its inverse
mymatrix <- x$get()
inv <- solve(mymatrix, ...)
#cache the inverse
x$setinverse(inv)
#return the inverse
inv
}
x<-list(a=1:5, b=rnorm(10))
x
lapply(x,mean)
x
str(apply)
str(gl)
log(-1)
mean(z)
mean(aa)
traceback
mean(aa)
traceback()
traceback
traceback()
z<-7
mean(aa)
z<-4
traceback()
debug(lm)
lm(y~x)
exit
break
recover
return
help
library(datasets)
data(iris)
iris
head(iris)
?iris
x<-iris
x$Sepal.length
x$Sepal.Length
x<-[x,Species=="virginica"]
x<-[x,x$Species=="virginica"]
x<-x,x$Species=="virginica"
head(iris)
sapply(iris,function(x) colMeans(x[,c("Sepal.Length")]))
sapply(iris,function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
sapply(iris,function(x) colMeans(x[,c("Sepal.Length")]))
sapply(x,function(x) colMeans(x[,c("Sepal.Length")]))
sapply(iris,function(x) colMeans(x[,c("Sepal.Length")]))
splitted<-split(iris,iris$Sepal.Length)
splitted
splitted<-split(iris,iris$Species)
head(splitted)
splitted
splitted<-split(iris,iris$Species)
sapply(splitted,function(x) colMeans(x[,c("Sepal.Length")]))
lapply(splitted,function(x) colMeans(x[,c("Sepal.Length")]))
splitted<-split(iris,iris$Species)
lapply(splitted, function(x) colMeans(x[,c("Sepal.Length")]))
airquality
s<-split(airquality,airquality$Month)
lapply<-s, function(x) colMeans(x)
lapply(s, function(x) colMeans(x))
lapply(s, function(x) colMeans(x[,c("Ozone")]))
library(datasets)
head(airquality)
s<-split(airquality,airquality$Month)
lapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
lapply(s, function(x) colMeans(x[,c("Ozone","Solar.R")]))
lapply(s, function(x) colMeans(x[,c("Ozone")]))
lapply(splitted,function(x) colMeans(x[,c("Sepal.Length","Sepal.width")]))
lapply(splitted,function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
splitted<-split(iris,iris$Species)
lapply(splitted,function(x) colMeans(x[,c("Sepal.Length","Sepal.width")]))
lapply(splitted,function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
head(iris)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(iris$Sepal.Length, iris$Species,mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
m<-tapply(mtcars$hp, mtcars$cyl, mean)
m
m[4]
m$4
m[1]
m[3]-m[1]
?qnorm
?pnorm
set.seed(1)
rpois(5, 2)
library(httr)
library(httpuv)
?par
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City",
type = "n"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City",
pch = 20))
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd = 2)
head(model)
class(model)
par(mfrow = c(1, 2))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
})
library(lattice)
library(datasets)
## Simple scatterplot
xyplot(Ozone ~ Wind, data = airquality)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group 1", "Group 2"))
xyplot(y ~ x | f, layout = c(2, 1))  ## Plot with 2 panels
data(airquality)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2)  ## Add a horizontal line at the median
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2)  ## Add a horizontal line at the median
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call default panel function
panel.lmline(x, y, col = 2)  ## Overlay a simple linear regression line
})
library(datasets)
data(airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
distxy <- dist(dataFrame)
View(distxy)
head(distxy)
hClustering <- hclust(distxy)
View(hClustering)
plot(hClustering)
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),
hang = 0.1, ...) {
## modifiction of plclust for plotting hclust objects *in colour*!  Copyright
## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector
## of labels of the leaves of the tree lab.col: colour for the labels;
## NA=default device foreground colour hang: as in hclust & plclust Side
## effect: A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height, 2)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],
col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)
}
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
dataFrame <- data.frame(x = x, y = y)
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
heatmap(dataMatrix)
source('~/.active-rstudio-document', echo=TRUE)
library(kernlab)
install.packages('kernlab')
data(spam)
# Perform the subsampling
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
data(spam)
setwd("C:/makisXPS/Rwork/RepData_PeerAssessment2")
print "test"
print 'test'
a<-"test"
print a
summary(data)
str(data)
summary(data)
class(data)
class(data)
class(mydata)
summary(mydata)
```{r cache=TRUE}
myurl <- "http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(url=myurl, destfile="StormData.csv.bz2")
```{r cache=TRUE}
myurl <- "http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(url=myurl, destfile="StormData.csv.bz2")
print("test")
```
```{r cache=TRUE}
extracted.file<-bzfile("StormData.csv.bz2")
mydata<-read.csv(extracted.file)
summary(mydata)
str(data)
str(mydata)
unique(mydata$EVTYPE)
mydata$EVENT <- mydata$EVTYPE
mydata$EVENT <- toupper(mydata$EVTYPE)
unique(mydata$EVENT)
mydata$EVTYPE <- toupper(mydata$EVTYPE)
unique(mydata$EVENT)
unique(mydata$EVTYPE)
grep?
s
grep??
d
grep("THUNDERSTORM", mydata$EVTYPE)
grep("THUNDERSTORM", unique(mydata$EVTYPE))
grepc("THUNDERSTORM", unique(mydata$EVTYPE))
greps("THUNDERSTORM", unique(mydata$EVTYPE))
grepstr("THUNDERSTORM", unique(mydata$EVTYPE))
grepl("THUNDERSTORM", unique(mydata$EVTYPE))
grep("THUNDERSTORM", unique(mydata$EVTYPE))
mydata$EVTYPE[grep("THUNDERSTORM", unique(mydata$EVTYPE))]
mydata$EVTYPE[grep("TPRNADO", unique(mydata$EVTYPE))]
mydata$EVTYPE[grep("TORNADO", unique(mydata$EVTYPE))]
tmpl<-grep("THUNDERSTORM", unique(mydata$EVTYPE))
mydata$EVTYPE[tmpl]
mydata$EVTYPE[grep("TORNADO", mydata$EVTYPE)]
mydata$EVTYPE[grep("THUNDERSTORM", mydata$EVTYPE)]
head(mydata)
names(mydata)
names(mydata)
head(mydata)
DF <- data.frame(
x=1:10,
y=10:1,
z=rep(5,10),
a=11:20
)
DF
keeps <- c("y","a")
DF[keeps]
DF
str(mydata)
keep<-c("EVTYPE","FATALITIES", "INJURIES","PROPDMG","PROPDMGEXP","CROPDMG","CROPDMGEXP")
mydata2<-mydata[keep]
names(mydata2)
head(mydata2)
head(mydata2,50)
count(unique(mydata2$EVTYPE))
length(unique(mydata2$EVTYPE))
unique(mydata2$EVTYPE)
data$EVTYPE
tornado<-grep("TORNADO", mydata2$EVTYPE)
mydata2$EVTYPE[tornado] <- "TORNADO"
flood<-grep("FLOOD", mydata2$EVTYPE)
mydata2$EVTYPE[flood] <- "FLOOD"
rain<-grep("RAIN", mydata2$EVTYPE)
mydata2$EVTYPE[rain] <- "RAIN"
fire<-grep("FIRE", mydata2$EVTYPE)
mydata2$EVTYPE[fire] <- "FIRE"
heat<-grep("HEAT", mydata2$EVTYPE)
mydata2$EVTYPE[] <- "HEAT"
snow<-grep("SNOW", mydata2$EVTYPE)
mydata2$EVTYPE[snow] <- "SNOW"
wind<-grep("WIND", mydata2$EVTYPE)
mydata2$EVTYPE[wind] <- "WIND"
cold<-grep("COLD", mydata2$EVTYPE)
mydata2$EVTYPE[cold] <- "COLD"
thunderstorm<-grep("THUNDERSTORM", mydata2$EVTYPE)
mydata2$EVTYPE[thunderstorm] <- "THUNDERSTORM"
mydata2$EVTYPE[grep("TORNADO", mydata2$EVTYPE)] <- "TORNADO"
mydata2$EVTYPE[grep("FLOOD", mydata2$EVTYPE)] <- "FLOOD"
mydata2$EVTYPE[grep("RAIN", mydata2$EVTYPE)] <- "RAIN"
mydata2$EVTYPE[grep("FIRE", mydata2$EVTYPE)] <- "FIRE"
mydata2$EVTYPE[grep("HEAT", mydata2$EVTYPE)] <- "HEAT"
mydata2$EVTYPE[grep("SNOW", mydata2$EVTYPE)] <- "SNOW"
mydata2$EVTYPE[grep("WIND", mydata2$EVTYPE)] <- "WIND"
mydata2$EVTYPE[grep("COLD", mydata2$EVTYPE)] <- "COLD"
mydata2$EVTYPE[grep("THUNDERSTORM", mydata2$EVTYPE)] <- "THUNDERSTORM"
mydata2$EVTYPE[grep("HAIL", mydata2$EVTYPE)] <- "HAIL"
mydata2$EVTYPE[grep("ICE", mydata2$EVTYPE)] <- "ICE"
mydata2$EVTYPE[grep("HURRICANE", mydata2$EVTYPE)] <- "HURRICANE"
len3<-length(unique(mydata2$EVTYPE))
len3
mydata2$EVTYPE
mydata2$EVTYPE<-mydata2$Event
len3
len3<-length(unique(mydata2$EVTYPE))
print(len3)
mydata2$EVTYPE<-mydata$EVTYPE
mydata2$EVTYPE[grep("TORNADO", mydata2$EVTYPE)] <- "TORNADO"
mydata2$EVTYPE[grep("FLOOD", mydata2$EVTYPE)] <- "FLOOD"
mydata2$EVTYPE[grep("RAIN", mydata2$EVTYPE)] <- "RAIN"
mydata2$EVTYPE[grep("FIRE", mydata2$EVTYPE)] <- "FIRE"
mydata2$EVTYPE[grep("HEAT", mydata2$EVTYPE)] <- "HEAT"
mydata2$EVTYPE[grep("SNOW", mydata2$EVTYPE)] <- "SNOW"
mydata2$EVTYPE[grep("WIND", mydata2$EVTYPE)] <- "WIND"
mydata2$EVTYPE[grep("COLD", mydata2$EVTYPE)] <- "COLD"
mydata2$EVTYPE[grep("THUNDERSTORM", mydata2$EVTYPE)] <- "THUNDERSTORM"
mydata2$EVTYPE[grep("HAIL", mydata2$EVTYPE)] <- "HAIL"
mydata2$EVTYPE[grep("ICE", mydata2$EVTYPE)] <- "ICE"
mydata2$EVTYPE[grep("HURRICANE", mydata2$EVTYPE)] <- "HURRICANE"
len3<-length(unique(mydata2$EVTYPE))
print(len3)
head(mydata2)
library(plyr)
names(mydata2)
unique(mydata2$injuries)
unique(mydata2$INJURIES)
names(mydata2)
groupByInjuries<-ddply(cleanData,~EVTYPE,summarise,sum=sum(INJURIES))
groupByInjuries<-ddply(mydata2,~EVTYPE,summarise,sum=sum(INJURIES))
groupByInjuries
hist(groupedByDate$sum,xlab="Event Type",
main="Histogram total injuries per event type",col="darkgreen")
hist(groupByInjuries$sum,xlab="Event Type",
main="Histogram total injuries per event type",col="darkgreen")
hist(groupByInjuries,xlab="Event Type",
main="Histogram total injuries per event type",col="darkgreen")
head(groupByInjuries)
with(groupByInjuries,plot(EVTYPE,sum,
type="l",
ylab="Average number of steps",
xlab="Interval",
main="Average daily activity",
col="darkred"))
groupByInjuries[sum>0]
groupByInjuries$sum
class(groupByInjuries$sum)
groupByInjuries[,sum>0]
groupByInjuries$sum>0
groupByInjuries[, groupByInjuries$sum>0]
groupByInjuries[groupByInjuries$sum>0,]
groupByInjuries<-groupByInjuries[groupByInjuries$sum>0,]
with(groupByInjuries,plot(EVTYPE,sum,
type="l",
ylab="Average number of steps",
xlab="Interval",
main="Average daily activity",
col="darkred"))
class(groupByInjuries$EVTYPE)
plot(groupByInjuries$EVTYPE, groupByInjuries$sum)
groupByInjuries$EVTYPE
plot(groupByInjuries)
groupByInjuries$sum
plot(groupByInjuries$EVTYPE, groupByInjuries$sum)
plot(groupByInjuries$sum,groupByInjuries$EVTYPE)
min(groupByInjuries$sum)
max(groupByInjuries$sum)
names(mydata2)
groupByFatalities<-ddply(mydata2,~EVTYPE,summarise,sum=sum(FATALITIES))
groupByFatalities<-groupByInjuries[groupByFatalities$sum>0,]
groupByFatalities
groupByFatalities<-ddply(mydata2,~EVTYPE,summarise,sum=sum(FATALITIES))
groupByFatalities<-groupByFatalities[groupByFatalities$sum>0,]
groupByFatalities
hist(groupByFatalities,xlab="Event Type",
main="Histogram total injuries per event type",col="darkgreen")
hist(groupByFatalities$sum,xlab="Event Type",
main="Histogram total injuries per event type",col="darkgreen")
with(groupByFatalities,plot(EVTYPE,sum,
type="l",
ylab="Average number of steps",
xlab="Interval",
main="Average daily activity",
col="darkred"))
with(groupByFatalities,plot(EVTYPE,sum)
)
groupByFatalities$EVTYPE<-factor(groupByFatalities$EVTYPE)
with(groupByFatalities,plot(EVTYPE,sum)
)
groupByInjuries<-ddply(mydata2,~EVTYPE,summarise,sum=sum(INJURIES))
groupByInjuries<-groupByInjuries[groupByInjuries$sum>0,]
groupByInjuries$EVTYPE<-factor(groupByInjuries$EVTYPE)
groupByFatalities<-ddply(mydata2,~EVTYPE,summarise,sum=sum(FATALITIES))
groupByFatalities<-groupByFatalities[groupByFatalities$sum>0,]
groupByFatalities$EVTYPE<-factor(groupByFatalities$EVTYPE)
hist(groupByFatalities$sum,xlab="Event Type",
main="Histogram total injuries per event type",col="darkgreen")
with(groupByInjuries,plot(EVTYPE,sum,
type="l",
ylab="Average number of steps",
xlab="Interval",
main="Average daily activity",
col="darkred"))
with(groupByFatalities,plot(EVTYPE,sum,
type="l",
ylab="Average number of steps",
xlab="Interval",
main="Average daily activity",
col="darkred"))
with(groupByFatalities,plot(EVTYPE,sum,
type="o",
ylab="Average number of steps",
xlab="Interval",
main="Average daily activity",
col="darkred"))
groupByFatalities[order(groupByFatalities$sum,decreasing=T),]
groupByFatalities<-groupByFatalities[order(groupByFatalities$sum,decreasing=T),]
groupByFatalities<-groupByFatalities[1:10,]
groupByFatalities
with(groupByFatalities,plot(EVTYPE,sum,
type="l",
ylab="Average number of steps",
xlab="Interval",
main="Average daily activity",
col="darkred"))
groupByFatalities<-groupByFatalities[order(groupByFatalities$sum,decreasing=T),]
groupByFatalities<-groupByFatalities[1:10,]
with(groupByFatalities,plot(EVTYPE,sum,
type="l",
ylab="Average number of steps",
xlab="Interval",
main="Average daily activity",
col="darkred"))
with(groupByFatalities,plot(EVTYPE,sum,
main="Total fatalities by event type",
col="darkred"))
groupByInjuries<-groupByInjuries[order(groupByInjuries$sum,decreasing=T),]
groupByInjuries<-groupByInjuries[1:5,]
with(groupByInjuries,plot(EVTYPE,sum,
main="Total injuries by event type",
col="darkred"))
groupByInjuries
with(groupByInjuries,plot(EVTYPE,sum,
main="Total injuries by event type",
col="darkred"))
groupByInjuries2<-groupByInjuries[1:5,]
with(groupByInjuries2,plot(EVTYPE,sum,
main="Total injuries by event type",
col="darkred"))
groupByInjuries2
groupByFatalities
